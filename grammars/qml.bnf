{
  parserClass = "name.kropp.intellij.qml.QmlParser"
  extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
  implements = "name.kropp.intellij.qml.psi.QmlPsiElement"

  psiClassPrefix = "Qml"
  psiImplClassSuffix = "Impl"
  psiPackage = "name.kropp.intellij.qml.psi"
  psiImplPackage = "name.kropp.intellij.qml.psi.impl"

  elementTypeHolderClass = "name.kropp.intellij.qml.psi.QmlTypes"
  elementTypeClass = "name.kropp.intellij.qml.psi.QmlElementType"
  tokenTypeClass = "name.kropp.intellij.qml.psi.QmlTokenType"

  tokens = [
    KEYWORD_IMPORT = 'import'
    KEYWORD_ALIAS = 'alias'
    KEYWORD_AS = 'as'
    KEYWORD_DEFAULT = 'default'
    KEYWORD_PROPERTY = 'property'
    KEYWORD_VAR = 'var'
    KEYWORD_READONLY = 'readonly'
    KEYWORD_SIGNAL = 'signal'
    KEYWORD_FUNCTION = 'function'
    KEYWORD_DOUBLE = 'double'
    KEYWORD_REAL = 'real'
    KEYWORD_PRAGMA = 'pragma'
    KEYWORD_SINGLETON = 'Singleton'
    LBRACE = '{'
    RBRACE = '}'
    LBRACKET = '['
    RBRACKET = ']'
    LPAREN = '('
    RPAREN = ')'
    COLON = ':'
    SEMICOLON = ';'
    COMMA = ','
    TRUE = 'true'
    FALSE = 'false'
    QMARK = '?'
    PIPE = '|'
  ]

  psiImplUtilClass = "name.kropp.intellij.qml.psi.QmlPsiImplUtil"
}

qml ::= pragma? imports object

pragma ::= 'pragma' 'Singleton'
imports ::= import*
import ::= 'import' (module version? | filename) ('as' qualifier)?
version ::= float // version_major '.' version_minor actually
module ::= identifier
qualifier ::= identifier
filename ::= string {mixin="name.kropp.intellij.qml.psi.QmlFilenameMixin" methods=[updateText]}

line_comment ::=
block_comment ::=

object ::= type body
body ::= '{' (property_definition|signal_definition|attribute_assignment|method_attribute)* '}'
type ::= 'double'|'real'|identifier

attribute_assignment ::= (attribute ':')? attribute_value ';'?
private item ::= list|object|string|boolean|number|identifier|value
private attribute_value ::= method_call|method_body|item|value+

property_definition ::= 'default'? 'readonly'? 'property' ('alias'|'var'|type) property (':' attribute_value)?
signal_definition ::= 'signal' signal ('(' (signal_parameter ',')* signal_parameter? ')')?
signal_parameter ::= ('var'|type) parameter

method_attribute ::= 'function' method '(' (parameter ',')* parameter? ')' method_body

method_call ::= method '(' (argument ',')* argument? ')'

method_body ::= '{' javascript '}'
javascript ::= ('{' javascript '}'|'var'|'['|']'|'('|')'|','|':'|';'|'?'|'|'|string|identifier|number|value)*

list ::= '[' item? (',' item)* ']'

property ::= identifier
attribute ::= identifier
signal ::= identifier
parameter ::= identifier
method ::= identifier
argument ::= string|boolean|number|identifier|value

private number ::= integer|float
private boolean ::= 'true'|'false'